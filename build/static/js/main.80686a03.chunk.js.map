{"version":3,"sources":["components/Chat/Chat.js","components/Chat/components/Message/Message.js","components/Join/Join.js","App.js","serviceWorker.js","index.js"],"names":["socket","player","Message","message","user","text","name","trim","toLowerCase","className","style","color","Chat","props","useState","setName","room","setRoom","users","setUsers","setMessage","modalOpen","setModalOpen","messages","setMessages","videoId","setVideoId","useEffect","location","state","io","emit","error","alert","on","off","getPlayerState","pauseVideo","currentTime","videoStatus","playVideo","seekTo","hasOwnProperty","loadVideoById","data","map","x","useLayoutEffect","onPlayerReady","event","onPlayerStateChange","playerState","target","getCurrentTime","playVideoWithTime","loadPlayer","window","YT","Player","playerVars","controls","loop","mute","host","events","onReady","onStateChange","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","time","id","onSubmit","preventDefault","TextField","value","onChange","type","placeholder","Button","variant","marginLeft","fontSize","length","onClick","Modal","open","onClose","aria-labelledby","aria-describedby","padding","key","i","onKeyPress","sendMessage","Join","to","pathname","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.80686a03.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Message from \"./components/Message/Message\";\r\nimport { IoMdSend } from \"react-icons/io\";\r\nimport \"./Chat.css\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nlet socket;\r\nlet player;\r\n\r\nconst Chat = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [videoId, setVideoId] = useState(\"YouTube Video ID\");\r\n  const ENDPOINT = \"/\";\r\n\r\n  useEffect(() => {\r\n    const { name, room } = props.location.state;\r\n\r\n    socket = io(ENDPOINT);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit(\"new_user\", { name, room }, (error) => {\r\n      if (error) {\r\n        alert(error);\r\n      }\r\n    });\r\n\r\n    socket.on(\"message\", (message) => {\r\n      setMessages((messages) => [...messages, message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n      socket.off();\r\n    };\r\n  }, [ENDPOINT, props.location.state]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"pauseVideo\", () => {\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        if (videoStatus !== 2) player.pauseVideo();\r\n      }\r\n    });\r\n\r\n    socket.on(\"playVideoWithTime\", (currentTime) => {\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        if (\r\n          videoStatus === 2 ||\r\n          videoStatus === -1 ||\r\n          videoStatus === 1 ||\r\n          videoStatus === 5\r\n        ) {\r\n          player.playVideo();\r\n          player.seekTo(currentTime, true);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"playVideo\", () => {\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        if (videoStatus === 2 || videoStatus === -1 || videoStatus === 1) {\r\n          player.playVideo();\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"loadVideoById\", (videoId) => {\r\n      if (player && player.hasOwnProperty(\"loadVideoById\"))\r\n        player.loadVideoById(videoId, 0);\r\n    });\r\n\r\n    socket.on(\"roomData\", (data) => {\r\n      // console.log();\r\n      setUsers(data.users.map((x) => x.name));\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (message) {\r\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\r\n    }\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const onPlayerReady = (event) => {\r\n      // event.target.playVideo();\r\n    };\r\n\r\n    const onPlayerStateChange = (event) => {\r\n      if (name !== \"controller\") return;\r\n      let playerState = event.data;\r\n      if (playerState === 2) {\r\n        pauseVideo();\r\n      }\r\n      if (playerState === 1 || playerState === 3) {\r\n        if (event.target.getCurrentTime) {\r\n          playVideoWithTime(event.target.getCurrentTime());\r\n        } else {\r\n          playVideo();\r\n        }\r\n      }\r\n    };\r\n\r\n    const loadPlayer = () => {\r\n      if (!window.YT.Player) {\r\n      } else {\r\n        player = new window.YT.Player(`player`, {\r\n          videoId: \"Md0RjxyoYyU\",\r\n          playerVars: {\r\n            controls: 1,\r\n            loop: 1,\r\n            mute: 1,\r\n          },\r\n          host: \"https://www.youtube.com\",\r\n          events: {\r\n            onReady: onPlayerReady,\r\n            onStateChange: onPlayerStateChange,\r\n          },\r\n        });\r\n      }\r\n    };\r\n\r\n    if (!window.YT) {\r\n      const tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      window.onYouTubeIframeAPIReady = loadPlayer;\r\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    } else {\r\n      loadPlayer();\r\n    }\r\n  }, [name]);\r\n\r\n  const changeVideoID = (event) => {\r\n    event.preventDefault();\r\n    if (name === \"controller\") {\r\n      socket.emit(\"loadVideoById\", videoId);\r\n      if (player && player.hasOwnProperty(\"loadVideoById\"))\r\n        player.loadVideoById(videoId, 0);\r\n    }\r\n  };\r\n\r\n  const pauseVideo = () => {\r\n    socket.emit(\"pauseVideo\");\r\n  };\r\n\r\n  const playVideoWithTime = (time) => {\r\n    socket.emit(\"playVideoWithTime\", time);\r\n  };\r\n\r\n  const playVideo = () => {\r\n    socket.emit(\"playVideo\");\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"full-container\">\r\n      <div className=\"form-video-wrapper\">\r\n        <div className=\"videoWrapper\">\r\n          <div id=\"player\"></div>\r\n        </div>\r\n        <div className=\"video-id-button\">\r\n          <form onSubmit={changeVideoID}>\r\n            <TextField\r\n              value={videoId}\r\n              onChange={(event) => setVideoId(event.target.value)}\r\n              type=\"text\"\r\n              placeholder=\"Video ID...\"\r\n            ></TextField>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              style={{ marginLeft: 30 }}\r\n            >\r\n              Change It\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"Chat-Window\">\r\n        <div className=\"Chat-Header\">\r\n          <div>\r\n            <GroupIcon fontSize=\"large\" />\r\n            {users.length}\r\n          </div>\r\n          <div>Room {room}</div>\r\n          <InfoIcon fontSize=\"large\" onClick={handleOpen} />\r\n          <Modal\r\n            open={modalOpen}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n            className=\"modal\"\r\n          >\r\n            <div className=\"inside-modal\">\r\n              <h2>Online users:</h2>\r\n              <div>\r\n                {users.map((user) => {\r\n                  return (\r\n                    <h4 style={{ padding: 10 }} key={user}>\r\n                      {user}\r\n                    </h4>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n        <div className=\"Messages-Wrapper\">\r\n          <ul className=\"Message-List\">\r\n            {messages.map((message, i) => (\r\n              <Message key={i} message={message} name={name}>\r\n                {message.text}\r\n              </Message>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"form-wrapper\">\r\n          <textarea\r\n            value={message}\r\n            onChange={(event) => setMessage(event.target.value)}\r\n            onKeyPress={(event) =>\r\n              event.key === \"Enter\" ? sendMessage(event) : null\r\n            }\r\n            type=\"text\"\r\n            className=\"text-input\"\r\n            placeholder=\"Write a message...\"\r\n          ></textarea>\r\n          <IoMdSend className=\"button-input\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\n// const isSameUser = false;\r\n\r\nconst Message = ({ message: { user, text }, name }) => {\r\n  return user === name.trim().toLowerCase() ? (\r\n    <li className=\"sent\">{text}</li>\r\n  ) : user === \"admin\" ? (\r\n    <div className=\"notification\">{text}</div>\r\n  ) : (\r\n    <li className=\"received\">\r\n      <span style={{ color: \"red\" }}>{name}</span>\r\n      <span>{text}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Join.css\";\r\n\r\nconst Join = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"wrapper\">\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"Name\"\r\n          type=\"text\"\r\n          onChange={(event) => {\r\n            setName(event.target.value);\r\n          }}\r\n        ></input>{\" \"}\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"Room\"\r\n          type=\"text\"\r\n          onChange={(event) => {\r\n            setRoom(event.target.value);\r\n          }}\r\n        ></input>{\" \"}\r\n        <Link\r\n          to={{\r\n            pathname: `/chat/${room}`,\r\n            state: { name: name, room: room },\r\n          }}\r\n          onClick={(event) => (!name || !room ? event.preventDefault() : null)}\r\n          className=\"button\"\r\n        >\r\n          <button type=\"submit\">Enter</button>\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Chat from \"./components/Chat/Chat\";\r\nimport Join from \"./components/Join/Join\";\r\nimport \"./App.css\";\r\n// import firebase from \"firebase\";\r\n\r\nfunction App() {\r\n  // const firebaseApp = firebase.apps[0];\r\n  return (\r\n    <>\r\n      {/* <Header>aaaa</Header> */}\r\n      {/* <code>\r\n        <pre>{JSON.stringify(firebaseApp.options, null, 2)}</pre>\r\n      </code> */}\r\n      <Router>\r\n        <Route path=\"/\" exact component={Join}></Route>\r\n        <Route path=\"/chat\" component={Chat}></Route>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// import firebase from \"firebase\";\r\n\r\n// firebase.initializeApp({\r\n//   apiKey: \"AIzaSyAcsqh7hW-GjzJSNJrW5AgpGPXnCL0fdxg\",\r\n//   authDomain: \"sync-yt-player.firebaseapp.com\",\r\n//   databaseURL: \"https://sync-yt-player.firebaseio.com\",\r\n//   projectId: \"sync-yt-player\",\r\n//   storageBucket: \"sync-yt-player.appspot.com\",\r\n//   messagingSenderId: \"758401482810\",\r\n//   appId: \"1:758401482810:web:e9f9e8ec3a5ddc5c27f503\",\r\n// });\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}