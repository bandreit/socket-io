{"version":3,"sources":["components/Chat/Chat.js","components/Chat/components/Message/Message.js","components/Join/Join.js","App.js","serviceWorker.js","index.js"],"names":["socket","player","Message","message","user","text","name","trim","toLowerCase","className","Chat","props","useState","setName","room","setRoom","setMessage","messages","setMessages","useEffect","location","state","io","emit","error","alert","on","off","getPlayerState","videoStatus","console","log","pauseVideo","currentTime","seekTo","playVideo","onPlayerReady","event","target","onPlayerStateChange","playerState","data","getCurrentTime","playVideoWithTime","loadPlayer","window","YT","Player","videoId","playerVars","controls","loop","mute","events","onReady","onStateChange","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","time","id","map","i","key","value","onChange","onKeyPress","preventDefault","sendMessage","type","placeholder","Join","to","pathname","onClick","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5a2f8c11.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Message from \"./components/Message/Message\";\r\nimport { IoMdSend } from \"react-icons/io\";\r\nimport \"./Chat.css\";\r\n\r\nlet socket;\r\nlet player;\r\n\r\nconst Chat = (props) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const ENDPOINT = \"/\";\r\n\r\n  useEffect(() => {\r\n    const { name, room } = props.location.state;\r\n\r\n    socket = io(ENDPOINT);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    socket.emit(\"new_user\", { name, room }, (error) => {\r\n      if (error) {\r\n        alert(error);\r\n      }\r\n    });\r\n\r\n    socket.on(\"message\", (message) => {\r\n      setMessages((messages) => [...messages, message]);\r\n    });\r\n\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n      socket.off();\r\n    };\r\n  }, [ENDPOINT, props.location.state]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"pauseVideo\", () => {\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        console.log(\"STOP\");\r\n        if (videoStatus !== 2) player.pauseVideo();\r\n      }\r\n    });\r\n    socket.on(\"playVideoWithTime\", (currentTime) => {\r\n      console.log(\"PLAY \", currentTime);\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        console.log(\"PLAY INSIDE\");\r\n        if (videoStatus === 2 || videoStatus === -1 || videoStatus === 1) {\r\n          player.seekTo(currentTime, true);\r\n          player.playVideo();\r\n        }\r\n      }\r\n      // player.playVideo();\r\n    });\r\n    socket.on(\"playVideo\", () => {\r\n      console.log(\"PLAY NO TIME\");\r\n      if (player.getPlayerState) {\r\n        let videoStatus = player.getPlayerState();\r\n        console.log(\"PLAY INSIDE\");\r\n        if (videoStatus === 2 || videoStatus === -1 || videoStatus === 1) {\r\n          player.playVideo();\r\n        }\r\n      }\r\n      // player.playVideo();\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    // player.pauseVideo();\r\n    // pauseVideo();\r\n    // console.log(player);\r\n\r\n    if (message) {\r\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\r\n    }\r\n  };\r\n\r\n  const onPlayerReady = (event) => {\r\n    event.target.playVideo();\r\n  };\r\n\r\n  const onPlayerStateChange = (event) => {\r\n    if (name !== \"controller\") return;\r\n    let playerState = event.data;\r\n    if (playerState === 2) {\r\n      console.log(\"paused\");\r\n      pauseVideo();\r\n    }\r\n    if (playerState === 1 || playerState === 3) {\r\n      if (event.target.getCurrentTime) {\r\n        playVideoWithTime(event.target.getCurrentTime());\r\n      } else {\r\n        playVideo();\r\n      }\r\n      console.log(\"played\");\r\n    }\r\n    if (playerState === -1) console.log(\"unstarted\");\r\n  };\r\n\r\n  const loadPlayer = () => {\r\n    if (!window.YT.Player) {\r\n      console.log(\"does not exist\");\r\n    } else {\r\n      console.log(\"apelat ampulea\");\r\n      player = new window.YT.Player(`player`, {\r\n        videoId: \"JNhiy0sTl5M\",\r\n        playerVars: {\r\n          controls: 1,\r\n          loop: 1,\r\n          mute: 1,\r\n        },\r\n        events: {\r\n          onReady: onPlayerReady,\r\n          onStateChange: onPlayerStateChange,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.YT) {\r\n      // If not, load the script asynchronously\r\n      const tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n      window.onYouTubeIframeAPIReady = loadPlayer;\r\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    } else {\r\n      loadPlayer();\r\n      console.log(\"WHAT THE FUCK\");\r\n    }\r\n    // the Player object is created uniquely based on the id in props\r\n  });\r\n\r\n  const pauseVideo = () => {\r\n    socket.emit(\"pauseVideo\");\r\n  };\r\n\r\n  const playVideoWithTime = (time) => {\r\n    socket.emit(\"playVideoWithTime\", time);\r\n  };\r\n\r\n  const playVideo = () => {\r\n    socket.emit(\"playVideo\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"full-container\">\r\n      <div id=\"player\"></div>\r\n      <div className=\"Chat-Window\">\r\n        <div className=\"Chat-Header\">\r\n          <div>Group Logo</div>\r\n          <div>Room {room}</div>\r\n          <div>Group Info</div>\r\n        </div>\r\n        <div className=\"Messages-Wrapper\">\r\n          <ul className=\"Message-List\">\r\n            {messages.map((message, i) => (\r\n              <Message key={i} message={message} name={name}>\r\n                {message.text}\r\n              </Message>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"form-wrapper\">\r\n          <input\r\n            value={message}\r\n            onChange={(event) => setMessage(event.target.value)}\r\n            onKeyPress={(event) =>\r\n              event.key === \"Enter\" ? sendMessage(event) : null\r\n            }\r\n            type=\"text\"\r\n            className=\"text-input\"\r\n            placeholder=\"Write a message...\"\r\n          ></input>\r\n          <IoMdSend className=\"button-input\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\n// const isSameUser = false;\r\n\r\nconst Message = ({ message: { user, text }, name }) => {\r\n  return user === name.trim().toLowerCase() ? (\r\n    <li className=\"sent\">{text}</li>\r\n  ) : user === \"admin\" ? (\r\n    <div className=\"notification\">{text}</div>\r\n  ) : (\r\n    <li>{text}</li>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Join.css\";\r\n\r\nconst Join = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [room, setRoom] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"wrapper\">\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"Name\"\r\n          type=\"text\"\r\n          onChange={(event) => {\r\n            setName(event.target.value);\r\n          }}\r\n        ></input>{\" \"}\r\n        <input\r\n          className=\"input\"\r\n          placeholder=\"Room\"\r\n          type=\"text\"\r\n          onChange={(event) => {\r\n            setRoom(event.target.value);\r\n          }}\r\n        ></input>{\" \"}\r\n        <Link\r\n          to={{\r\n            pathname: \"/chat\",\r\n            state: { name: name, room: room },\r\n          }}\r\n          onClick={(event) => (!name || !room ? event.preventDefault() : null)}\r\n        >\r\n          <button type=\"submit\">Enter</button>\r\n        </Link>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Chat from \"./components/Chat/Chat\";\nimport Join from \"./components/Join/Join\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Join}></Route>\n      <Route path=\"/chat\" component={Chat}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}